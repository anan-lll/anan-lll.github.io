import{_ as a,o as e,c as t,Q as r}from"./chunks/framework.a4f2a176.js";const o="/assets/stickPicture.2f83f9f4.png",f=JSON.parse('{"title":"稳定性测试","description":"稳定性测试方案","frontmatter":{"title":"稳定性测试","date":"2023-10-10T00:00:00.000Z","description":"稳定性测试方案","disabled":false,"readMins":15,"tags":["CSS"]},"headers":[],"relativePath":"blog/test/稳定性测试.md","filePath":"blog/test/稳定性测试.md"}'),s={name:"blog/test/稳定性测试.md"},h=r('<h1 id="稳定性测试实践" tabindex="-1">稳定性测试实践 <a class="header-anchor" href="#稳定性测试实践" aria-label="Permalink to &quot;稳定性测试实践&quot;">​</a></h1><h2 id="为什么要做稳定性测试" tabindex="-1">为什么要做稳定性测试？ <a class="header-anchor" href="#为什么要做稳定性测试" aria-label="Permalink to &quot;为什么要做稳定性测试？&quot;">​</a></h2><p> 目前我们有一部分线上OT主要由于系统或者功能不稳定引起。比如系统上线一段时间发现磁盘暴涨，或者服务重启宕机等情况归因为稳定性问题，稳定性测试主要目的是在5*24h持续测试下尽可能提前发现稳定性相关问题并解决。<br> 官方解释如下：<br> 稳定性测试是一种非功能性软件测试方法，旨在测试软件应用程序在长时间内连续运行的效率和能力。进行稳定性测试是为了检查已开发产品的效率（通常超过瓶颈点）、超出正常运行能力。负载下产品的错误处理，软件可靠性、鲁棒性和可伸缩性具有更大的意义，而不是通常情况下检查系统行为。<br> 简而言之就是让系统持续处于压力下运行，观察系统的硬件和业务功能有无出现异常，发现一些在单个测试场景下，或者短时间内发现不了的问题。<br> 我的总结是稳定性测试是系统的，长期的，有压力的测试。 </p><h2 id="稳定性测试的不同场景" tabindex="-1">稳定性测试的不同场景 <a class="header-anchor" href="#稳定性测试的不同场景" aria-label="Permalink to &quot;稳定性测试的不同场景&quot;">​</a></h2><p><img src="'+o+'" alt="这是图片" title="Magic Gardens"></p><h3 id="场景一-恒定压力" tabindex="-1">场景一：恒定压力 <a class="header-anchor" href="#场景一-恒定压力" aria-label="Permalink to &quot;场景一：恒定压力&quot;">​</a></h3><p> 目标是为了检验在恒定的大压力下，系统的服务是否稳定，比如是否存在吞吐量TPS指标的波动，响应延迟的抖动、毛刺等。波动情况必须在恒定的压力下进行验证，如果是波动的压力，出现吞吐量波动或者响应延迟的长尾现象会难以捕捉分析，难以区分是业务的问题还是服务的问题，为性能问题定位带来较大难度。 </p><h3 id="场景二-基于线上产品压力模型" tabindex="-1">场景二：基于线上产品压力模型 <a class="header-anchor" href="#场景二-基于线上产品压力模型" aria-label="Permalink to &quot;场景二：基于线上产品压力模型&quot;">​</a></h3><p>1.通过监控<br> 2.通过观察任务情况<br> 3.通过脚本统计<br> 4.流量回放<br></p><p>总结： 我们不难观察产品线上的典型业务及业务比例，那么在过去的七天或者一个月的时间内，产品每天的业务模型是什么样的？根据线上监控及统计不难得出。这个阶段就是为了模拟线上的这种业务模型下，也即是存在峰谷变化的压力、典型的一些Web产品每天的压力模型是比较固定的，比如每天早上9点，下午4点，晚上10点都会存在压力峰值。这种方式的模拟会为系统的稳定性带来一定的压力，如用户量突增等情况，会不会导致错误或宕机等。</p><h3 id="场景三-在恒定压力下-引入异常干扰-注入异常用例" tabindex="-1">场景三：在恒定压力下，引入异常干扰，注入异常用例 <a class="header-anchor" href="#场景三-在恒定压力下-引入异常干扰-注入异常用例" aria-label="Permalink to &quot;场景三：在恒定压力下，引入异常干扰，注入异常用例&quot;">​</a></h3><p>如CPU波动、网络延迟、主节点挂掉或重启等异常情况的出现，来充分拷打产品的稳定性和可靠性。常见的异常测试如混沌工程<br> 阿里chaosblade <a href="https://github.com/chaosblade-io/chaosblade" target="_blank" rel="noreferrer">https://github.com/chaosblade-io/chaosblade</a><br> 其他平台适用于k8s <a href="https://github.com/chaos-mesh/chaos-mesh" target="_blank" rel="noreferrer">https://github.com/chaos-mesh/chaos-mesh</a><br> 主要用于模拟CPU异常，内存使用，磁盘IO使用，磁盘空间填充，网络延迟，网络丢包等情况。</p>',12),i=[h];function c(l,n,d,b,_,p){return e(),t("div",null,i)}const u=a(s,[["render",c]]);export{f as __pageData,u as default};
